klucz = abcde (97 - 101) 
	(01100001 01100010 01100011 01100100 01100101)
slowa = {
"b ana" (01100010 00100000 01100001 01101110 01100001)
"ny sa" (01101110 01111001 00100000 01110011 01100001)
" supe" (00100000 01110011 01110101 01110000 01100101)
"ranck" (01110010 01100001 01101110 01100011 01101011)
"ie i " (01101001 01100101 00100000 01101001 00100000)
}
slowa xor klucz = {
	(00000011 01000010 00000010 00001010 00000100)
	(00001111 00011011 01000011 00010111 00000100)
	(01000001 00010001 00010110 00010100 00000000)
	(00010011 00000011 00001101 00000111 00001110)
	(00001000 00000111 01000011 00001101 01000101)
}

kryptoanaliza:
	 a	  b        c        d         e
m1 ^ m2	(00001100
m2 ^ m3	(01001110 - m2 lub m3 spacja; drugi znak = "n"(110)
m3 ^ m4	(01010010 - m3 lub m4 spacja; drugi znak = "r"
m4 ^ m5	(00011011

m2 = n; m3 = " "; m4 = "r"

Zasady:
	Jeśli m1 ^ m2 = 010..., to m1 lub m2 jest spacją, 
		a drugi znak to m1 ^ m2 ^ 00100000
	Jeśli m1 ^ m2 = 000..., to m1 oraz m2 są znakami
	
	Stąd:
	m1 ^ m2 = 010... && m2 ^ m3 = 010... -> 
		m1 = m1 ^ m2 ^ 00100000
		m2 = 00100000
		m3 = m2 ^ m3 ^ 00100000
		
	m1 ^ m2 = 010... && m2 ^ m3 = 000... ->
		m1 = 00100000
		m2 = m1 ^ m2 ^ 00100000
		m3 = m2 ^ m3 ^ 00100000
		
	m1 ^ m3 = 010... := m1 = m3 ->
		m1 = 00100000
		m2 = m1 ^ m2 ^ 00100000
		m3 = 00100000
	
	
